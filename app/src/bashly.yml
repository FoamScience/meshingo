name: meshingo
help: |
  A cell-size recommendation system for CFD meshes;

  **Idea**:

  From an STL file describing the (water-tight) flow domain, guess a "good-enough" minimal cell size (to be used at feature-edges) and a ratio between smallest and biggest cell size in the mesh. These parameters can then be used to mesh the surface STLs in an **unattended way**.

  This naturally seemed like a ML task, and to save on the number of meshing operations needed, Bayesian Optimization is used to "train" a surrogate model, then fine-tune it on the target STL model.

  The surrogate model is tuned into the following directions (these are hard-coded):
  1. Favorizing bigger cell sizes to produce meshes that are as coarse as possible while detecting all important surface features. This is enforced by applying a decay function to cell-size objective functions.
  1. Producing Hex-based meshing, using [(open-source version of) cfMesh's](https://cfmesh.com/cfmesh-open-source/) `cartesianMesh`. The tool's workflow is already pretty automated, and all it needs is a small nudge towards good cell sizes.

  The tuning stage can be configured into the following directions:
  1. Favorizing meshes needing less than `STAGE1_MAX_OCTREES` levels of refinement in order to control RAM usage during training. By default, fast meshing operations requiring less than 16GB of RAM are promoted.
  1. Controlling Bias towards features of the training dataset, through the distributions of STL geometric features.

  &gt; [!IMPORTANT]
  &gt; Experimental at best, still figuring out the best objective functions, parameters to consider, and STL model types to train on.

version: 0.1.0

dependencies:
  git: install git through your package manager
  uv: install by running $(curl -LsSf https://astral.sh/uv/install.sh | sh)
  cartesianMesh: source etc/bashrc from an OpenFOAM installation with cfMesh compiled
  surfaceCheck: source etc/bashrc from an OpenFOAM installation


commands:
- name: install
  alias: i
  help: Install Python dependencies, assuming you have uv

- name: stage1
  alias: [s1, train]
  help: Run a 1st stage bayesian optimization, leveraging full runs of meshing tools to train a surrogate model. This will take some time

  args:
  - name: training_stls
    required: true
    help: Path to a folder with STL models used for the 1st optimization run

  flags:
  - long: --stage1-name
    arg: stage1-name
    required: true
    help: Name for stage1 optimization problem
  - long: --n-parallel-trials
    arg: n-parallel-trials
    default: "2"
    help: Number of parallel trials for stage1 optimization run
  - long: --n-trials
    arg: n-trials
    default: "300"
    help: Max total number of trials to run in stage 1 optimization
  - long: --stopping-improvement
    arg: stopping-improvement
    default: "1e-3"
    help: Improvement bar for early stopping the stage 1 optimization
  - long: --trial-ttl
    arg: trial-ttl
    default: "3000"
    help: Trial Time-To-Live in seconds

  environment_variables:
    - name: stage1_max_octrees
      help: Maximal allowed number of Octree levels generated by cfMesh tools.
      default: "9"

  examples:
  - meshingo train --stage1-name Meshingo --n-trials 300 training_dataset/

- name: validate
  alias: v
  help: Infer settings from a saved surrogate model, and run corresponding meshing case.

  args:
  - name: target_stl
    required: true
    help: | 
      Path to a target STL, used for model inference. Will use the same configs used
      to train the model, with the option to change environment variables.

  flags:
  - long: --model
    arg: model
    required: true
    help: Name for surrogate model

  - long: --training-set
    arg: training_set
    required: true
    help: Path to geometric_features.csv for the training dataset

  environment_variables:
    - name: stage1_max_octrees
      help: Maximal allowed number of Octree levels generated by cfMesh tools.
      default: "9"

  examples:
  - meshingo validate --model stage1/Meshingo /my/model.stl

- name: bias-scan
  alias: bs
  help: Check if the stage 1 bayesian optimization produced a surrogate model that
    favorizes some parameters over the others.

  flags:
  - long: --stage1-name
    arg: stage1-name
    required: true
    help: Name for stage1 optimization problem
  - long: --threshold
    arg: threshold
    required: false
    default: "0.05"
    help: Maximal tolerable difference in feature importance for cell size objective
  - long: --ignore
    required: false
    help: Don't fail even if the model is heavily biased

  examples:
  - meshingo bias-scan --stage1-name Meshingo --threshold 0.1

- name: stage2
  alias: [s2, predict]
  help: Fine-tune surrogate model from stage 1 on target STL, and reach a verdict for the top
    three (3) "good-enough" cell sizes.

  args:
  - name: target_stl
    required: true
    help: Path to the target STL to guess the cell size for

  flags:
  - long: --stage1-name
    arg: stage1-name
    required: true
    help: Name for stage1 optimization problem
  - long: --stage2-name
    arg: stage2-name
    required: true
    help: Name for stage2 optimization problem
  - long: --n-parallel-trials
    arg: n-parallel-trials
    default: "2"
    help: Number of parallel trials for stage1 optimization run
  - long: --n-trials
    arg: n-trials
    default: "300"
    help: Max total number of trials to run in stage 1 optimization
  - long: --stopping-improvement
    arg: stopping-improvement
    default: "1e-3"
    help: Improvement bar for early stopping the stage 1 optimization
  - long: --trial-ttl
    arg: trial-ttl
    default: "3000"
    help: Trial Time-To-Live in seconds

  examples:
  - meshingo predict --stage1-name Meshingo --stage2-name Test testing_dataset/model.stl
